import telebot
from telebot import types

import json

import functions as fu
import openai
import os

with open('config.json', 'r', encoding="utf-8") as file:
    config = json.load(file)

with open('clients.json', 'r', encoding="utf-8") as file:
    clients = json.load(file)
    
openai.api_key = config["api_key"]

prompt = """–Ñ –º–æ–±—ñ–ª—å–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä lifecell, —è–∫–∏–π –º–∞—î –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏:

     –ü–µ—Ä—à–∏–π –¢–∞—Ä–∏—Ñ.
    –ù–∞–∑–≤–∞: "–í—ñ–ª—å–Ω–∏–π –õ–∞–π—Ñ"
    –¶—ñ–Ω–∞: 180 –≥—Ä–Ω –∑–∞ 4 —Ç–∏–∂–Ω—ñ —è–∫—â–æ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ, 275 –≥—Ä–Ω –∑–∞ 4 —Ç–∏–∂–Ω—ñ —è–∫—â–æ –Ω–æ–º–µ—Ä –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ/–ø–µ—Ä—Å–æ–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å 325 –≥—Ä–Ω –∑–∞ 4 —Ç–∏–∂–Ω—ñ.
    –î–∑–≤—ñ–Ω–∫–∏: 1600 —Ö–≤ –Ω–∞ –≤—Å—ñ –Ω–æ–º–µ—Ä–∏ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ
    –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: –ë–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç.
    –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó: –ë–µ–∑–ª—ñ–º—ñ—Ç –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ, –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏ —Ç–∞ –æ—Å–≤—ñ—Ç–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏.
                     –ü–∞–∫–µ—Ç –í—ñ–ª—å–Ω–∏–π –¢–í+ –≤–∫–ª—é—á–µ–Ω–æ —É —Ç–∞—Ä–∏—Ñ
                     –•–º–∞—Ä–Ω–µ —Å—Ö–æ–≤–∏—â–µ lifebox: 50 GB
    
     –î—Ä—É–≥–∏–π –¢–∞—Ä–∏—Ñ.
    –ù–∞–∑–≤–∞: "–°–º–∞—Ä—Ç –õ–∞–π—Ñ"
    –¶—ñ–Ω–∞: 120 –≥—Ä–Ω –∑–∞ 4 —Ç–∏–∂–Ω—ñ —è–∫—â–æ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ, 175 –≥—Ä–Ω –∑–∞ 4 —Ç–∏–∂–Ω—ñ —è–∫—â–æ –Ω–æ–º–µ—Ä –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ/–ø–µ—Ä—Å–æ–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å 225 –≥—Ä–Ω –∑–∞ 4 —Ç–∏–∂–Ω—ñ.
    –î–∑–≤—ñ–Ω–∫–∏: 800 —Ö–≤ –Ω–∞ –≤—Å—ñ –Ω–æ–º–µ—Ä–∏ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ
    –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: 25 GB —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.
    –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó: –ë–µ–∑–ª—ñ–º—ñ—Ç –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ, –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏ —Ç–∞ –æ—Å–≤—ñ—Ç–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏.
    
     –¢—Ä–µ—Ç—ñ–π –¢–∞—Ä–∏—Ñ.
    –ù–∞–∑–≤–∞: "–ü—Ä–æ—Å—Ç–æ –õ–∞–π—Ñ"
    –¶—ñ–Ω–∞: 90 –≥—Ä–Ω –∑–∞ 4 —Ç–∏–∂–Ω—ñ —è–∫—â–æ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ, 140 –≥—Ä–Ω –∑–∞ 4 —Ç–∏–∂–Ω—ñ —è–∫—â–æ –Ω–æ–º–µ—Ä –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ/–ø–µ—Ä—Å–æ–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å 160 –≥—Ä–Ω –∑–∞ 4 —Ç–∏–∂–Ω—ñ.
    –î–∑–≤—ñ–Ω–∫–∏: 300 —Ö–≤ –Ω–∞ –≤—Å—ñ –Ω–æ–º–µ—Ä–∏ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ
    –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: 8 GB —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.
    –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó: –ë–µ–∑–ª—ñ–º—ñ—Ç –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ, –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏ —Ç–∞ –æ—Å–≤—ñ—Ç–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏.
                     
     –ß–µ—Ç–≤–µ—Ä—Ç–∏–π –¢–∞—Ä–∏—Ñ.
    –ù–∞–∑–≤–∞: "Platinum –õ–∞–π—Ñ"
    –¶—ñ–Ω–∞: 250 –≥—Ä–Ω –∑–∞ 4 —Ç–∏–∂–Ω—ñ —è–∫—â–æ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ, 400 –≥—Ä–Ω –∑–∞ 4 —Ç–∏–∂–Ω—ñ —è–∫—â–æ –Ω–æ–º–µ—Ä –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ/–ø–µ—Ä—Å–æ–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å 450 –≥—Ä–Ω –∑–∞ 4 —Ç–∏–∂–Ω—ñ.
    –î–∑–≤—ñ–Ω–∫–∏: 3000 —Ö–≤ –Ω–∞ –≤—Å—ñ –Ω–æ–º–µ—Ä–∏ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ
    –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: –ë–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç.
    –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó: –ë–µ–∑–ª—ñ–º—ñ—Ç –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ, –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏ —Ç–∞ –æ—Å–≤—ñ—Ç–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏.
                     –ü–∞–∫–µ—Ç –ü–ª–∞—Ç–∏–Ω—É–º –¢–í+ –≤–∫–ª—é—á–µ–Ω–æ —É —Ç–∞—Ä–∏—Ñ
                     –•–º–∞—Ä–Ω–µ —Å—Ö–æ–≤–∏—â–µ lifebox: 500 GB
                     
     –ü'—è—Ç–∏–π –¢–∞—Ä–∏—Ñ.
    –ù–∞–∑–≤–∞: "–®–∫—ñ–ª—å–Ω–∏–π –õ–∞–π—Ñ"
    –¶—ñ–Ω–∞: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å 150 –≥—Ä–Ω –∑–∞ 4 —Ç–∏–∂–Ω—ñ.
    –î–∑–≤—ñ–Ω–∫–∏: –ë–µ–∑–ª—ñ–º—ñ—Ç –Ω–∞ lifecell. –ë–µ–∑–ª—ñ–º—ñ—Ç –Ω–∞ –¥–≤–∞ "–û–±—Ä–∞–Ω—ñ –Ω–æ–º–µ—Ä–∏".
    –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: 7 GB —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.
    –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó: –ë–µ–∑–ª—ñ–º—ñ—Ç –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ, –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏ —Ç–∞ –æ—Å–≤—ñ—Ç–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏.
                     
–ö–ª—ñ—î–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, –¥–µ —Ö–æ—á–µ –≤–∏–±—Ä–∞—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –Ω—å–æ–≥–æ —Ç–∞—Ä–∏—Ñ. –û—Å—å –ø–∏—Ç–∞–Ω–Ω—è:

1. –°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?
    - –ú–µ–Ω—å—à–µ 18
    - –ë—ñ–ª—å—à–µ 18

2. –î–ª—è –∫–æ–≥–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç–∞—Ä–∏—Ñ?
    - –î–ª—è —Å—ñ–º'—ó
    - –î–ª—è —Å–µ–±–µ
    
3. –î–ª—è —á–æ–≥–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç–∞—Ä–∏—Ñ?
    - –î–ª—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ 
    - –î–ª—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É 
    - –î–ª—è —Å–æ—Ü –º–µ—Ä–µ–∂ 
    - –î–ª—è –≤—Å—å–æ–≥–æ 

4. –Ø–∫–∞ —Ü—ñ–Ω–∞ —Ç–∞—Ä–∏—Ñ—É –≤–∞—Å –≤–ª–∞—à—Ç–æ–≤—É—î?
    - –ú–µ–Ω—à–µ 200
    - –ë—ñ–ª—å—à–µ 200
    - –ú–µ–Ω—ñ –±–∞–π–¥—É–∂–µ

5. –Ø–∫–∏–π –æ–±'—î–º —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω?
    - –ë–µ–∑–ª—ñ–º—ñ—Ç
    - –ú–µ–Ω—à–µ 10
    - –ë—ñ–ª—å—à–µ 10
    - –ú–µ–Ω—ñ –±–∞–π–¥—É–∂–µ
    
6. –Ø–∫ —á–∞—Å—Ç–æ –≤–∏ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å —Å–æ—Ü. –º–µ—Ä–µ–∂–∞–º–∏ —Ç–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º–∏?
    - –ß–∞—Å—Ç–æ
    - –†—ñ–¥–∫–æ
    - –ú–µ–Ω—ñ –±–∞–π–¥—É–∂–µ
    
7. –°–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ?\n_–î–∑–≤—ñ–Ω–∫–∏ —É –º–µ—Ä–µ–∂—ñ lifecell - –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ._
    - –ú–µ–Ω—à–µ 1200 —Ö–≤–∏–ª–∏–Ω
    - –ë—ñ–ª—å—à–µ 1200 —Ö–≤–∏–ª–∏–Ω
    - –ú–µ–Ω—ñ –±–∞–π–¥—É–∂–µ
    
    –¢–æ–±—ñ –≤—ñ–¥—ñ—à–ª–µ—Ç—å—Å—è –ª–∏—Å—Ç –≤–∏–¥—É [1,3,3,2,2,2,1], –¥–µ –∫–æ–∂–Ω–∞ —Ü–∏—Ñ—Ä–∞ —Ü–µ –ø–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è.
–¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à –ø—ñ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –∑–∞ —Ü–∏–º –ª–∏—Å—Ç–æ–º. –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ç—Ä–µ—Ç—î –ø–∏—Ç–∞–Ω–Ω—è "–î–ª—è –¥–∑–≤—ñ–Ω–∫—ñ–≤",
—Ç–æ –Ω–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ 5-—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è.


    –ü–æ—á–∏–Ω–∞—Ç–∏ —Ç—Ä–µ–±–∞ –∑ —Å–ª—ñ–≤ "–ú–∏ –º–æ–∂–µ–º–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ –≤–∞–º —Ç–∞—Ä–∏—Ñ " (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Å–ª–æ–≤–∞ —Å–∏–Ω–æ–Ω—ñ–º–∞–º–∏ –∞–±–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏), –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ
–ø—Ä–æ–ø—É—Å—Ç–∏ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ —ñ –≤—ñ–¥–ø—Ä–∞–≤ –Ω–∞—Å—Ç—É–ø–Ω—É —Ñ–æ—Ä–º—É, –¥–µ –∑–∞–º—ñ–Ω–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ <> –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∞—Ä–∏—Ñ—É:
    
\nüíµ **–¶—ñ–Ω–∞:** <—Ü—ñ–Ω–∞ –∑–∞ —Ç–∞—Ä–∏—Ñ> –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ
‚òéÔ∏è **–î–∑–≤—ñ–Ω–∫–∏:** <–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω –ø–æ –£–∫—Ä–∞—ó–Ω—ñ> —Ö–≤
üåê **–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç:** <–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ì–ë —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É, –º–æ–∂–µ –±—É—Ç–∏ –ë–µ–∑–ª—ñ–º—ñ—Ç> –ì–ë
ü§Ø **–ê —â–µ —É –ø–∞–∫–µ—Ç—ñ –ø–æ—Å–ª—É–≥ —Ç–∞—Ä–∏—Ñ—É:** <–ø–ª—é—Å–∏, —è–∫—ñ —î –≤ —Ç–∞—Ä–∏—Ñ—ñ, —è–∫—ñ –º–æ–∂—É—Ç—å –∑–∞—Ü—ñ–∫–∞–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞>
    –ù–æ–º–µ—Ä —Ç–∞—Ä–∏—Ñ—É: <–ù–æ–º–µ—Ä —Ç–∞—Ä–∏—Ñ—É –∑—ñ —Å–ø–∏—Å–∫–∞>
"""

bot = telebot.TeleBot(config["token"])

@bot.message_handler(commands=['start'])
def main(message):
    clients['clients'][f'{message.chat.first_name}-{message.chat.last_name}'] = []
    fu.create_main_template(bot, message)
    with open('clients.json', 'w') as file:
        json.dump(clients, file, indent=4) 

@bot.callback_query_handler(func = lambda call: True)
def answer(call):
    message = call.message
    answer = call.data
    if answer.split('_')[0][:1] == "b":
        if answer == config["button1_data"]:
            fu.find_tarif(bot, message)
        elif answer == config["button2_data"]:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(config["button_back_text"], callback_data=config["button_back_data"]))
            bot.edit_message_text(config["button2_text"], message.chat.id, message_id = message.id, reply_markup=markup, parse_mode='MarkdownV2')
        elif answer == config["button3_data"]:
            markup_another = types.InlineKeyboardMarkup()
            markup_another.add(types.InlineKeyboardButton(config["zsu_but1_name"], url=config["zsu_but1_url"]))
            markup_another.add(types.InlineKeyboardButton(config["zsu_but2_name"], url=config["zsu_but2_url"]))
            markup_another.add(types.InlineKeyboardButton(config["zsu_but3_name"], url=config["zsu_but3_url"]))
            markup_another.add(types.InlineKeyboardButton(config["button_back_text"], callback_data=config["button_back_data"]))
            msg_text = config["button3_text"]
            bot.edit_message_text(msg_text, message.chat.id, message_id = message.id, reply_markup=markup_another)
        elif answer == config["button_back_data"]:
            fu.edit_to_main_template(bot, message)
        elif answer == config["button1_but_data"]:
            fu.create_question(bot, message, 1)
        elif answer == "back_button":
            question_number = str(message.text).split(".")[0][:1]
            fu.create_question(bot, message, int(question_number)-1)
            fu.delete_client_answer(clients, answer, message)
    elif answer.split('_')[0][:1] == "q":
        num = answer.split('_')[0][1:2]
        if num == "1" and answer.split('_')[1][6:] == "1":
            result = """–°–ø—Ä–æ–±—É–π—Ç–µ "–®–∫—ñ–ª—å–Ω–∏–π –õ–∞–π—Ñ"
            
üíµ –¶—ñ–Ω–∞: 150 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ
‚òéÔ∏è –î–∑–≤—ñ–Ω–∫–∏: –ë–µ–∑–ª—ñ–º—ñ—Ç
üåê –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: 7 –ì–ë
ü§Ø –ê —â–µ —É –ø–∞–∫–µ—Ç—ñ –ø–æ—Å–ª—É–≥ —Ç–∞—Ä–∏—Ñ—É: –ë–µ–∑–ª—ñ–º—ñ—Ç –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ, –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏, –æ—Å–≤—ñ—Ç–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏."""
            fu.tariff_offer(bot, message, result, 1)
        elif num == "2" and answer.split('_')[1][6:] == "1":
            result = """–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –≤–∞–º —Ç–∞—Ä–∏—Ñ "–°–º–∞—Ä—Ç —Å—ñ–º'—è S/M/L"

üíµ –¶—ñ–Ω–∞: 375 - 425 - 500 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ
‚òéÔ∏è –î–∑–≤—ñ–Ω–∫–∏: 500 - 750 - 1500 —Ö–≤
üåê –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: 20 - 30 - 50 –ì–ë
ü§Ø –ê —â–µ —É –ø–∞–∫–µ—Ç—ñ –ø–æ—Å–ª—É–≥ —Ç–∞—Ä–∏—Ñ—É: –ó–º—ñ–Ω—é—é—Ç—å—Å—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –≤–∏–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ—É"""
            fu.tariff_offer(bot, message, result, 2)
        else:    
            fu.add_client_answer(clients, answer, message)
            if int(num) <= 6:
                fu.create_question(bot, message, int(num)+1)
            else:
                bot.edit_message_text("–í–∏ –ø—Ä–æ–π—à–ª–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è\\!\n–ü–æ—á–µ–∫–∞–π—Ç–µ *–¥–µ–∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥*, –ø–æ–∫–∏ –Ω–∞—à –±–æ—Ç –∑ –®–Ü –æ–±—Ä–æ–±–∏—Ç—å –≤–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\\.", message.chat.id, message_id = message.id, parse_mode="MarkdownV2")
                completion = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": prompt},
                        {"role": "user", "content": str(clients['clients'][f'{message.chat.first_name}-{message.chat.last_name}'])}
                    ],
                    temperature=0.4
                )
                fu.end_question(bot,message, completion.choices[0].message['content'])
    elif answer.split('_')[0][:1] == "e":
        if answer == "end_button1":
            fu.add_client_answer(clients, answer, message)
            fu.create_question(bot, message, 2)
        elif answer == "end_button2":
            fu.add_client_answer(clients, answer, message)
            fu.create_question(bot, message, 2)
    elif answer.split('_')[0][:1] == "l":
        if answer == config["last_button_data"]:
            clients['clients'][f'{message.chat.first_name}-{message.chat.last_name}'] = []
            fu.create_main_template(bot, message)
            with open('clients.json', 'w') as file:
                json.dump(clients, file, indent=4) 
    bot.answer_callback_query(callback_query_id=call.id)

bot.polling(none_stop = True, interval = 0)